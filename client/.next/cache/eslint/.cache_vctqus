[{"C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\api\\hello.js":"1","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\customers\\components\\customersList.js":"2","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\customers\\index.js":"3","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\inventory\\components\\inventoryList.js":"4","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\inventory\\index.js":"5","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\orders\\components\\transactionList.js":"6","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\orders\\index.js":"7","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\overview\\components\\card.js":"8","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\overview\\components\\charts.js":"9","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\overview\\components\\pieCharts.js":"10","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\overview\\components\\transactionList.js":"11","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\overview\\components\\transactions.js":"12","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\overview\\index.js":"13","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\team\\components\\list.js":"14","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\team\\index.js":"15","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\team\\user\\components\\list.js":"16","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\team\\user\\[id].js":"17","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\index.js":"18","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\_app.js":"19","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\src\\components\\sidebar.js":"20","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\src\\components\\topbar.js":"21"},{"size":170,"mtime":1651823160751,"results":"22","hashOfConfig":"23"},{"size":2222,"mtime":1656828784718,"results":"24","hashOfConfig":"23"},{"size":4697,"mtime":1657162875687,"results":"25","hashOfConfig":"23"},{"size":2915,"mtime":1656828709746,"results":"26","hashOfConfig":"23"},{"size":5425,"mtime":1657059249083,"results":"27","hashOfConfig":"23"},{"size":2165,"mtime":1656818731591,"results":"28","hashOfConfig":"23"},{"size":4855,"mtime":1657059275387,"results":"29","hashOfConfig":"23"},{"size":397,"mtime":1656818714598,"results":"30","hashOfConfig":"23"},{"size":4707,"mtime":1656963054098,"results":"31","hashOfConfig":"23"},{"size":4072,"mtime":1656963029958,"results":"32","hashOfConfig":"23"},{"size":2165,"mtime":1656818731591,"results":"33","hashOfConfig":"23"},{"size":1830,"mtime":1656962696907,"results":"34","hashOfConfig":"23"},{"size":1480,"mtime":1657059237669,"results":"35","hashOfConfig":"23"},{"size":3254,"mtime":1657654506358,"results":"36","hashOfConfig":"23"},{"size":5160,"mtime":1657672448738,"results":"37","hashOfConfig":"23"},{"size":3253,"mtime":1657762594825,"results":"38","hashOfConfig":"23"},{"size":1777,"mtime":1657761717017,"results":"39","hashOfConfig":"23"},{"size":126,"mtime":1656819867789,"results":"40","hashOfConfig":"23"},{"size":273,"mtime":1657111017345,"results":"41","hashOfConfig":"23"},{"size":8981,"mtime":1657672456843,"results":"42","hashOfConfig":"23"},{"size":1336,"mtime":1656828160065,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1fm3b5e",{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\api\\hello.js",[],[],"C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\customers\\components\\customersList.js",[],[],"C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\customers\\index.js",["114"],[],"import styles from \"../../../styles/customers.module.scss\";\r\nimport CustomerList from \"./components/customersList\";\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n    MdOutlineKeyboardArrowLeft,\r\n    MdOutlineKeyboardArrowRight,\r\n} from \"react-icons/md\";\r\nimport axios from \"axios\";\r\nimport { Triangle } from \"react-loader-spinner\";\r\n\r\nconst api = axios.create({\r\n    baseURL: \"http://localhost:3001\",\r\n});\r\n\r\nexport default function Customers() {\r\n    const [data, setData] = useState([]);\r\n    const [checked, setChecked] = useState(false);\r\n    const [numbers, setNumbers] = useState([1, 10, null]);\r\n    const [update, setUpdate] = useState();\r\n    const [previousNum, setPreviousNum] = useState();\r\n    const [loaded, setLoading] = useState(false);\r\n    \r\n\r\n    useEffect(() => {\r\n        post();\r\n        get();\r\n    }, [update]);\r\n\r\n    const post = () => {\r\n        api.post(\"/customers/list\", { data: numbers });\r\n    };\r\n\r\n    const get = () => {\r\n        api.get(\"/customers\").then((res) => {\r\n            setData(res.data);\r\n            setLoading(true);\r\n        });\r\n        api.get(\"/customers/count\").then((res) => {\r\n            let array = [...numbers];\r\n            array[2] = res.data;\r\n            setNumbers(array);\r\n        });\r\n    };\r\n\r\n    const right = () => {\r\n        let array = [];\r\n        if (numbers[1] >= numbers[2]) {\r\n            return;\r\n        } else {\r\n            array = [...numbers];\r\n            setPreviousNum(numbers);\r\n            array[0] += 10;\r\n            array[1] = array[0] + 10;\r\n            if (array[1] >= array[2]) {\r\n                array[1] = array[2];\r\n                if (array[0] >= array[2]) {\r\n                    array[0] -= 10;\r\n                }\r\n                setNumbers(array);\r\n            } else {\r\n                setNumbers(array);\r\n            }\r\n            api.post(\"/customers/list\", { data: array });\r\n            setUpdate(array);\r\n        }\r\n    };\r\n\r\n    const left = () => {\r\n        let array = [];\r\n        if (numbers[1] >= numbers[2]) {\r\n            array = [...previousNum];\r\n            setNumbers(array);\r\n        } else {\r\n            array = [...numbers];\r\n            array[0] -= 10;\r\n            array[1] -= 10;\r\n            if (array[0] <= 1) {\r\n                array[0] = 1;\r\n                array[1] = 10;\r\n            }\r\n            setNumbers(array);\r\n        }\r\n        api.post(\"/customers/list\", { data: array });\r\n        setUpdate(array);\r\n    };\r\n    if (loaded) {\r\n        return (\r\n            <div className={styles.content}>\r\n                <div className={styles.right}>\r\n                    <div className={styles.header}>Customers</div>\r\n                    <div>\r\n                        <span>{`${numbers[0]} - ${numbers[1]} of ${numbers[2]}`}</span>\r\n                        <MdOutlineKeyboardArrowLeft\r\n                            color=\"#454f5b\"\r\n                            onClick={left}\r\n                        />\r\n                        <MdOutlineKeyboardArrowRight\r\n                            color=\"#454f5b\"\r\n                            onClick={right}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={styles.wrapper}>\r\n                    <div className={styles.title}>\r\n                        <div className={styles.label}>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={checked}\r\n                                onChange={() => setChecked(!checked)}\r\n                            />\r\n                            <span>Name</span>\r\n                        </div>\r\n                        <div>Phone</div>\r\n                        <div>Email</div>\r\n                        <div>Created</div>\r\n                    </div>\r\n                    {Object.keys(data).map((key, index) => {\r\n                        return (\r\n                            <CustomerList\r\n                                key={key}\r\n                                first_name={data[index].first_name}\r\n                                last_name={data[index].last_name}\r\n                                id={data[index].id}\r\n                                created={data[index].created}\r\n                                email={data[index].email}\r\n                                phone={data[index].phone}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className={styles.loading_container}>\r\n                <Triangle color=\"#672cff\" height={50} width={50} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\inventory\\components\\inventoryList.js",["115"],[],"import styles from \"../../../../styles/inventoryList.module.scss\";\r\nimport { useState } from \"react\";\r\nimport Image from \"next/image\";\r\nimport ReactStars from \"react-stars\";\r\nimport { GoKebabVertical } from \"react-icons/go\";\r\nimport OutsideClickHandler from \"react-outside-click-handler\";\r\n\r\nexport default function InventoryList(props) {\r\n    const [checked, setChecked] = useState(false);\r\n    const [isopen, setOpen] = useState(false);\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.label}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={checked}\r\n                    onChange={() => setChecked(!checked)}\r\n                />\r\n                <div className={styles.item}>\r\n                    <Image src={props.image} height={60} width={60} />\r\n                    <div>\r\n                        <span className={styles.name}>{props.name}</span>\r\n                        <div>{`${props.quantity} in stock`}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={styles.total}>{\"$\" + props.total}</div>\r\n            <div className={styles.updated}>\r\n                <div>{props.date}</div>\r\n                <div>{props.time}</div>\r\n            </div>\r\n            <div className={styles.status}>{props.status}</div>\r\n            <div className={styles.rating}>\r\n                <ReactStars\r\n                    count={5}\r\n                    size={20}\r\n                    color2={\"#ffd700\"}\r\n                    color1={\"#c4cdd54d\"}\r\n                    edit={false}\r\n                    value={\r\n                        (props.r1 * 1 +\r\n                            props.r2 * 2 +\r\n                            props.r3 * 3 +\r\n                            props.r4 * 4 +\r\n                            props.r5 * 5) /\r\n                        (props.r1 + props.r2 + props.r3 + props.r5 + props.r5)\r\n                    }\r\n                />\r\n                <div className={styles.dropdown}>\r\n                    <OutsideClickHandler\r\n                        onOutsideClick={() => {\r\n                            setOpen(false);\r\n                        }}\r\n                    >\r\n                        <div\r\n                            className={styles.kebab}\r\n                            onClick={() => setOpen(!isopen)}\r\n                        >\r\n                            <GoKebabVertical id={props.id} size={20} />\r\n                        </div>\r\n                    </OutsideClickHandler>\r\n\r\n                    {isopen && (\r\n                        <div className={styles.dropdown_content}>\r\n                            <div>Edit</div>\r\n                            <div>Archive</div>\r\n                            <div>Delete</div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\inventory\\index.js",["116"],[],"import styles from \"../../../styles/inventory.module.scss\";\r\nimport InventoryList from \"./components/inventoryList\";\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n    MdOutlineKeyboardArrowLeft,\r\n    MdOutlineKeyboardArrowRight,\r\n} from \"react-icons/md\";\r\nimport axios from \"axios\";\r\nimport { Triangle } from \"react-loader-spinner\";\r\n\r\nconst api = axios.create({\r\n    baseURL: \"http://localhost:3001\",\r\n});\r\n\r\nexport default function Inventory() {\r\n    const [data, setData] = useState([]);\r\n    const [checked, setChecked] = useState(false);\r\n    const [numbers, setNumbers] = useState([1, 5, null]);\r\n    const [update, setUpdate] = useState();\r\n    const [previousNum, setPreviousNum] = useState();\r\n    const [past, setPast] = useState(true);\r\n    const [loaded, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        post();\r\n        get();\r\n    }, [update]);\r\n\r\n    const post = () => {\r\n        api.post(\"/inventory/list\", { data: numbers });\r\n    };\r\n\r\n    const get = () => {\r\n        api.get(\"/inventory\").then((res) => {\r\n            setData(res.data);\r\n            setLoading(true)\r\n        });\r\n        api.get(\"/inventory/count\").then((res) => {\r\n            let array = [...numbers];\r\n            array[2] = res.data;\r\n            setNumbers(array);\r\n        });\r\n    };\r\n\r\n    const right = () => {\r\n        let array = [];\r\n        if (numbers[1] >= numbers[2]) {\r\n            return;\r\n        } else {\r\n            array = [...numbers];\r\n            setPreviousNum(numbers);\r\n            array[0] += 5;\r\n            array[1] = array[0] + 5;\r\n            if (array[1] >= array[2]) {\r\n                array[1] = array[2];\r\n                if (array[0] >= array[2]) {\r\n                    array[0] -= 5;\r\n                }\r\n                setNumbers(array);\r\n            } else {\r\n                setNumbers(array);\r\n            }\r\n            setPast(false);\r\n            api.post(\"/inventory/list\", { data: array });\r\n            setUpdate(array);\r\n        }\r\n    };\r\n\r\n    const left = () => {\r\n        let array = null;\r\n        if (numbers[1] >= numbers[2]) {\r\n            array = [...previousNum];\r\n            setNumbers(array);\r\n        } else {\r\n            array = [...numbers];\r\n            array[0] -= 5;\r\n            array[1] -= 6;\r\n            if (array[0] <= 1) {\r\n                array[0] = 1;\r\n                array[1] = 5;\r\n                setPast(true);\r\n            }\r\n            setNumbers(array);\r\n        }\r\n        if (past === true) return;\r\n        api.post(\"/inventory/list\", { data: array });\r\n        setUpdate(array);\r\n    };\r\n    if(loaded){\r\n        return (\r\n            <div className={styles.content}>\r\n                <div className={styles.right}>\r\n                <div className={styles.header}>Inventory</div>\r\n                    <div>\r\n                        <span>{`${numbers[0]} - ${numbers[1]} of ${numbers[2]}`}</span>\r\n                        <MdOutlineKeyboardArrowLeft\r\n                            color=\"#454f5b\"\r\n                            onClick={left}\r\n                        />\r\n                        <MdOutlineKeyboardArrowRight\r\n                            color=\"#454f5b\"\r\n                            onClick={right}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={styles.wrapper}>\r\n                    <div className={styles.title}>\r\n                        <div className={styles.label}>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={checked}\r\n                                onChange={() => setChecked(!checked)}\r\n                            />\r\n                            <span>Name</span>\r\n                        </div>\r\n                        <div>Price</div>\r\n                        <div>Updated</div>\r\n                        <div>Status</div>\r\n                        <div>Ratings</div>\r\n                    </div>\r\n                    {Object.keys(data).map((key, index) => {\r\n                        let binary = new Uint8Array(data[index].image.data);\r\n                        let blob = new Blob([binary], { type: \"image/jpeg\" });\r\n                        let url = URL.createObjectURL(blob);\r\n                        return (\r\n                            <InventoryList\r\n                                key={key}\r\n                                id={key}\r\n                                name={data[index].name}\r\n                                date={data[index].date}\r\n                                total={data[index].price}\r\n                                image={url}\r\n                                quantity={data[index].quantity}\r\n                                time={data[index].time}\r\n                                status={data[index].status}\r\n                                r1={data[index].r1}\r\n                                r2={data[index].r2}\r\n                                r3={data[index].r3}\r\n                                r4={data[index].r4}\r\n                                r5={data[index].r5}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }else{\r\n        return (\r\n            <div className={styles.loading_container}>\r\n                <Triangle  color=\"#672cff\" height={50} width={50} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\orders\\components\\transactionList.js",[],[],"C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\orders\\index.js",["117"],[],"import styles from \"../../../styles/orders.module.scss\";\r\nimport TransactionList from \"./components/transactionList\";\r\nimport { useState, useEffect } from \"react\";\r\nimport {\r\n    MdOutlineKeyboardArrowLeft,\r\n    MdOutlineKeyboardArrowRight,\r\n} from \"react-icons/md\";\r\nimport axios from \"axios\";\r\nimport { Triangle } from \"react-loader-spinner\";\r\n\r\nconst api = axios.create({\r\n    baseURL: \"http://localhost:3001\",\r\n});\r\n\r\nexport default function Orders() {\r\n    const [data, setData] = useState([]);\r\n    const [checked, setChecked] = useState(false);\r\n    const [numbers, setNumbers] = useState([1, 10, null]);\r\n    const [update, setUpdate] = useState();\r\n    const [previousNum, setPreviousNum] = useState();\r\n    const [loaded, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        post();\r\n        get();\r\n    }, [update]);\r\n\r\n    const post = () => {\r\n        api.post(\"/send-numbers\", { data: numbers });\r\n    };\r\n\r\n    const get = () => {\r\n        api.get(\"/get-data\").then((res) => {\r\n            setData(res.data);\r\n            setLoading(true);\r\n        });\r\n        api.get(\"/total\").then((res) => {\r\n            let array = [...numbers];\r\n            array[2] = res.data;\r\n            setNumbers(array);\r\n        });\r\n    };\r\n\r\n    const right = () => {\r\n        let array = [];\r\n        if (numbers[1] >= numbers[2]) {\r\n            return;\r\n        } else {\r\n            array = [...numbers];\r\n            setPreviousNum(numbers);\r\n            array[0] += 10;\r\n            array[1] += 11;\r\n            if (array[1] >= array[2]) {\r\n                array[1] = array[2];\r\n                if (array[0] >= array[2]) {\r\n                    array[0] -= 10;\r\n                }\r\n                setNumbers(array);\r\n            } else {\r\n                setNumbers(array);\r\n            }\r\n            api.post(\"/send-numbers\", { data: array });\r\n            setUpdate(array);\r\n        }\r\n    };\r\n\r\n    const left = () => {\r\n        let array = [];\r\n        if (numbers[1] >= numbers[2]) {\r\n            array = [...previousNum];\r\n            setNumbers(array);\r\n        } else {\r\n            console.log(2);\r\n            array = [...numbers];\r\n            array[0] -= 10;\r\n            array[1] -= 11;\r\n            if (array[0] <= 1) {\r\n                console.log(3);\r\n                array[0] = 1;\r\n                array[1] = 10;\r\n            }\r\n            setNumbers(array);\r\n        }\r\n        api.post(\"/send-numbers\", { data: array });\r\n        setUpdate(array);\r\n    };\r\n    if (loaded) {\r\n        return (\r\n            <div className={styles.content}>\r\n                <div className={styles.right}>\r\n                    <div className={styles.header}>Orders</div>\r\n                    <div>\r\n                        <span>{`${numbers[0]} - ${numbers[1]} of ${numbers[2]}`}</span>\r\n                        <MdOutlineKeyboardArrowLeft\r\n                            color=\"#454f5b\"\r\n                            onClick={left}\r\n                        />\r\n                        <MdOutlineKeyboardArrowRight\r\n                            color=\"#454f5b\"\r\n                            onClick={right}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={styles.wrapper}>\r\n                    <div className={styles.title}>\r\n                        <div className={styles.label}>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={checked}\r\n                                onChange={() => setChecked(!checked)}\r\n                            />\r\n                            <span>Order ID</span>\r\n                        </div>\r\n                        <div>Billing Name</div>\r\n                        <div>Date</div>\r\n                        <div>Total</div>\r\n                        <div>Payment Status</div>\r\n                        <div>Payment Method</div>\r\n                    </div>\r\n                    {Object.keys(data).map((key, index) => {\r\n                        return (\r\n                            <TransactionList\r\n                                key={key}\r\n                                name={data[index].customer}\r\n                                id={data[index].order_id}\r\n                                date={data[index].date}\r\n                                total={data[index].total}\r\n                                payment_status={data[index].payment_status}\r\n                                payment_method={data[index].payment_method}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className={styles.loading_container}>\r\n                <Triangle color=\"#672cff\" height={50} width={50} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\overview\\components\\card.js",[],[],"C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\overview\\components\\charts.js",[],[],"C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\overview\\components\\pieCharts.js",[],[],"C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\overview\\components\\transactionList.js",[],[],"C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\overview\\components\\transactions.js",[],[],"C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\overview\\index.js",[],[],"C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\team\\components\\list.js",["118"],[],"import styles from \"../../../../styles/teamList.module.scss\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport Image from \"next/image\";\r\nimport { GoKebabVertical } from \"react-icons/go\";\r\nimport Link from \"next/link\";\r\n\r\nexport default function List(props) {\r\n    const [checked, setChecked] = useState(false);\r\n    const [isopen, setOpen] = useState(false);\r\n    const ref = useRef();\r\n    \r\n    useEffect(() => {\r\n        const clickOutside = (e) => {\r\n            if (\r\n                isopen &&\r\n                ref.current &&\r\n                !ref.current.contains(e.target) &&\r\n                e.path[2].className !== \"customersList_dropdown__gFPBH\"\r\n            ) {\r\n                setOpen(false);\r\n            }\r\n        };\r\n\r\n        document.addEventListener(\"mousedown\", clickOutside);\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", clickOutside);\r\n        };\r\n    }, [isopen]);\r\n\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.label}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={checked}\r\n                    onChange={() => setChecked(!checked)}\r\n                />\r\n                <div className={styles.item}>\r\n                    <div className={styles.profilePhoto}>\r\n                        <Image\r\n                            loading=\"eager\"\r\n                            layout=\"fixed\"\r\n                            src={props.image}\r\n                            height={50}\r\n                            width={50}\r\n                            priority\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <span className={styles.name}>{props.name}</span>\r\n                        <div>{props.position}</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className={styles.total}>{props.email}</div>\r\n            <div className={styles.status_container}>\r\n                <div className={styles.status}>\r\n                    {props.status === 0 ? \"Offline\" : \"Online\"}\r\n                </div>\r\n                <div className={styles.dropdown}>\r\n                    <div\r\n                        className={styles.kebab}\r\n                        onClick={() => setOpen(!isopen)}\r\n                    >\r\n                        <GoKebabVertical id={props.id} size={20} />\r\n                    </div>\r\n\r\n                    {isopen && (\r\n                        <div className={styles.dropdown_content}>\r\n                            <Link\r\n                                as={`/dashboard/team/user/${props.id}`}\r\n                                href={{\r\n                                    pathname: \"/dashboard/team/user/[id]\",\r\n                                    query: {\r\n                                        id: props.id,\r\n                                    },\r\n                                }}\r\n                            >\r\n                                <div>View</div>\r\n                            </Link>\r\n\r\n                            <div>Actions</div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\team\\index.js",[],[],"C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\team\\user\\components\\list.js",["119"],[],"C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\dashboard\\team\\user\\[id].js",["120"],[],"import { useState } from \"react\";\r\nimport styles from \"../../../../styles/user.module.scss\";\r\nimport Image from \"next/image\";\r\nimport axios from \"axios\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\nconst api = axios.create({\r\n    baseURL: \"http://localhost:3001\",\r\n});\r\n\r\nconst User = ({ api_result, users }) => {\r\n    const [data, setData] = useState(api_result);\r\n    const [user, setUser] = useState(users);\r\n\r\n    console.log(user);\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.card}>\r\n                <div className={styles.circle_container}>\r\n                    <div className={styles.photo}>\r\n                        <Image\r\n                            priority\r\n                            height={100}\r\n                            width={100}\r\n                            src={data.image}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className={styles.info}>\r\n                    <span>{data.name}</span>\r\n                    <span>{data.position}</span>\r\n                    <span>{data.email}</span>\r\n                    <span>9764390281</span>\r\n                    <button>Message</button>\r\n                </div>\r\n            </div>\r\n            <div className={styles.list}></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport async function getServerSideProps(ctx) {\r\n    const { query } = ctx;\r\n    var result = \"\";\r\n    var list = \"\";\r\n    await api.post(\"/id\", { data: query.id });\r\n    await api.get(\"/user\").then((res) => {\r\n        result = res.data;\r\n    });\r\n    await api.get(\"/list\").then((res) => {\r\n        list = res.data;\r\n    });\r\n\r\n    return { props: { api_result: result, users: list } };\r\n}\r\n\r\nexport default User;\r\n","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\index.js",[],[],"C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\pages\\_app.js",[],[],"C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\src\\components\\sidebar.js",["121"],[],"import styles from \"../../styles/sidebar.module.scss\";\r\nimport Image from \"next/image\";\r\nimport { useState } from \"react\";\r\nimport { MdOutlineDashboardCustomize, MdOutlineTask } from \"react-icons/md\";\r\nimport {\r\n    BsReceipt,\r\n    BsBoxSeam,\r\n    BsPeople,\r\n    BsPerson,\r\n    BsChat,\r\n    BsCalendar3,\r\n} from \"react-icons/bs\";\r\nimport { IoMailOutline, IoSettingsOutline } from \"react-icons/io5\";\r\nimport Link from \"next/link\";\r\n\r\nconst color = \"#454F5B\";\r\nconst color_hover = \"#672CFF\";\r\n\r\nexport default function Sidebar() {\r\n    const [generalButtons, setGeneralButtons] = useState([\r\n        {\r\n            name: \"Dashboard\",\r\n            image: <MdOutlineDashboardCustomize color={color} />,\r\n            image_hover: <MdOutlineDashboardCustomize color={color_hover} />,\r\n            hover: false,\r\n            focus: true,\r\n            href: \"/dashboard/overview\",\r\n        },\r\n        {\r\n            name: \"Orders\",\r\n            image: <BsReceipt color={color} />,\r\n            image_hover: <BsReceipt color={color_hover} />,\r\n            hover: false,\r\n            focus: false,\r\n            href: \"/dashboard/orders\",\r\n        },\r\n        {\r\n            name: \"Inventory\",\r\n            image: <BsBoxSeam color={color} />,\r\n            image_hover: <BsBoxSeam color={color_hover} />,\r\n            hover: false,\r\n            focus: false,\r\n            href: \"/dashboard/inventory\",\r\n        },\r\n        {\r\n            name: \"Customers\",\r\n            image: <BsPeople color={color} />,\r\n            image_hover: <BsPeople color={color_hover} />,\r\n            hover: false,\r\n            focus: false,\r\n            href: \"/dashboard/customers\",\r\n        },\r\n        {\r\n            name: \"Team\",\r\n            image: <BsPerson color={color} />,\r\n            image_hover: <BsPerson color={color_hover} />,\r\n            hover: false,\r\n            focus: false,\r\n            href: \"/dashboard/team\",\r\n        },\r\n    ]);\r\n\r\n    const [appButtons, setappButtons] = useState([\r\n        {\r\n            name: \"Mail\",\r\n            image: <IoMailOutline color={color} />,\r\n            image_hover: <IoMailOutline color={color_hover} />,\r\n            hover: false,\r\n            focus: false,\r\n        },\r\n        {\r\n            name: \"Chat\",\r\n            image: <BsChat color={color} />,\r\n            image_hover: <BsChat color={color_hover} />,\r\n            hover: false,\r\n            focus: false,\r\n        },\r\n        {\r\n            name: \"Calendar\",\r\n            image: <BsCalendar3 color={color} />,\r\n            image_hover: <BsCalendar3 color={color_hover} />,\r\n            hover: false,\r\n            focus: false,\r\n        },\r\n        {\r\n            name: \"Task\",\r\n            image: <MdOutlineTask color={color} />,\r\n            image_hover: <MdOutlineTask color={color_hover} />,\r\n            hover: false,\r\n            focus: false,\r\n        },\r\n        {\r\n            name: \"Settings\",\r\n            image: <IoSettingsOutline color={color} />,\r\n            image_hover: <IoSettingsOutline color={color_hover} />,\r\n            hover: false,\r\n            focus: false,\r\n        },\r\n    ]);\r\n\r\n    const generalButtonClick = (index) => {\r\n        console.log(index);\r\n        let array = [...generalButtons];\r\n        let array2 = [...appButtons];\r\n        for (let i = 0; i < array.length; i++) {\r\n            array[i].focus = false;\r\n        }\r\n        for (let i = 0; i < array2.length; i++) {\r\n            array2[i].focus = false;\r\n        }\r\n        array[index].focus = true;\r\n        setGeneralButtons(array);\r\n        setappButtons(array2);\r\n    };\r\n\r\n    const generalButtonHoverEnter = (index) => {\r\n        let array = [...generalButtons];\r\n        for (let i = 0; i < array.length; i++) {\r\n            array[i].hover = false;\r\n        }\r\n        array[index].hover = true;\r\n        setGeneralButtons(array);\r\n    };\r\n\r\n    const generalButtonHoverleave = () => {\r\n        let array = [...generalButtons];\r\n        for (let i = 0; i < array.length; i++) {\r\n            array[i].hover = false;\r\n        }\r\n        setGeneralButtons(array);\r\n    };\r\n\r\n    const appsButtonClick = (index) => {\r\n        let array = [...appButtons];\r\n        let array2 = [...generalButtons];\r\n        for (let i = 0; i < array.length; i++) {\r\n            array[i].focus = false;\r\n        }\r\n        for (let i = 0; i < array2.length; i++) {\r\n            array2[i].focus = false;\r\n        }\r\n        array[index].focus = true;\r\n        setappButtons(array);\r\n        setGeneralButtons(array2);\r\n    };\r\n\r\n    const appsButtonHoverEnter = (index) => {\r\n        let array = [...appButtons];\r\n        for (let i = 0; i < array.length; i++) {\r\n            array[i].hover = false;\r\n        }\r\n        array[index].hover = true;\r\n        setappButtons(array);\r\n    };\r\n\r\n    const appsButtonHoverleave = () => {\r\n        let array = [...appButtons];\r\n        for (let i = 0; i < array.length; i++) {\r\n            array[i].hover = false;\r\n        }\r\n        setappButtons(array);\r\n    };\r\n    return (\r\n        <div className={styles.wrapper}>\r\n            <div className={styles.profile}>\r\n                <div className={styles.profilePhoto}>\r\n                    <Image\r\n                        priority\r\n                        height={100}\r\n                        width={100}\r\n                        src=\"/profile.jpg\"\r\n                    />\r\n                </div>\r\n                <div className={styles.info}>\r\n                    <span className={styles.name}>Samantha Beckford</span>\r\n                    <span className={styles.position}>Admin</span>\r\n                </div>\r\n            </div>\r\n            <span className={styles.text}>GENERAL</span>\r\n            <ul className={styles.buttonContainer}>\r\n                {Object.keys(generalButtons).map((key, index) => {\r\n                    return (\r\n                        <Link key={key} href={generalButtons[index].href}>\r\n                            <div className={styles.button} key={key}>\r\n                                <li\r\n                                    className={\r\n                                        generalButtons[index].focus === true\r\n                                            ? styles.containerFocus\r\n                                            : styles.container\r\n                                    }\r\n                                    onMouseEnter={() =>\r\n                                        generalButtonHoverEnter(index)\r\n                                    }\r\n                                    onMouseLeave={() =>\r\n                                        generalButtonHoverleave()\r\n                                    }\r\n                                    onClick={() => generalButtonClick(index)}\r\n                                >\r\n                                    {generalButtons[index].focus == true\r\n                                        ? generalButtons[index].image_hover\r\n                                        : generalButtons[index].hover == true\r\n                                        ? generalButtons[index].image_hover\r\n                                        : generalButtons[index].image}\r\n                                    <span className={styles.buttonText}>\r\n                                        {generalButtons[index].name}\r\n                                    </span>\r\n                                </li>\r\n                            </div>\r\n                        </Link>\r\n                    );\r\n                })}\r\n            </ul>\r\n            <span className={styles.text}>APPS</span>\r\n            <ul className={styles.buttonContainer}>\r\n                {Object.keys(appButtons).map((key, index) => {\r\n                    return (\r\n                        <div className={styles.button} key={key}>\r\n                            <li\r\n                                onMouseEnter={() => appsButtonHoverEnter(index)}\r\n                                onMouseLeave={() => appsButtonHoverleave()}\r\n                                onClick={() => appsButtonClick(index)}\r\n                                className={\r\n                                    appButtons[index].focus === true\r\n                                        ? styles.containerFocus\r\n                                        : styles.container\r\n                                }\r\n                            >\r\n                                {appButtons[index].focus == true\r\n                                    ? appButtons[index].image_hover\r\n                                    : appButtons[index].hover == true\r\n                                    ? appButtons[index].image_hover\r\n                                    : appButtons[index].image}\r\n                                <span className={styles.buttonText}>\r\n                                    {appButtons[index].name}\r\n                                </span>\r\n                            </li>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\arche\\Desktop\\code\\New folder\\admin\\client\\src\\components\\topbar.js",[],[],{"ruleId":"122","severity":1,"message":"123","line":27,"column":8,"nodeType":"124","endLine":27,"endColumn":16,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":21,"column":21,"nodeType":"128","endLine":21,"endColumn":71},{"ruleId":"122","severity":1,"message":"123","line":27,"column":8,"nodeType":"124","endLine":27,"endColumn":16,"suggestions":"129"},{"ruleId":"122","severity":1,"message":"123","line":26,"column":8,"nodeType":"124","endLine":26,"endColumn":16,"suggestions":"130"},{"ruleId":"126","severity":1,"message":"127","line":40,"column":25,"nodeType":"128","endLine":47,"endColumn":27},{"ruleId":"126","severity":1,"message":"127","line":40,"column":25,"nodeType":"128","endLine":47,"endColumn":27},{"ruleId":"126","severity":1,"message":"127","line":20,"column":25,"nodeType":"128","endLine":25,"endColumn":27},{"ruleId":"126","severity":1,"message":"127","line":167,"column":21,"nodeType":"128","endLine":172,"endColumn":23},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'get' and 'post'. Either include them or remove the dependency array.","ArrayExpression",["131"],"jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["132"],["133"],{"desc":"134","fix":"135"},{"desc":"134","fix":"136"},{"desc":"134","fix":"137"},"Update the dependencies array to be: [get, post, update]",{"range":"138","text":"139"},{"range":"140","text":"139"},{"range":"141","text":"139"},[836,844],"[get, post, update]",[875,883],[829,837]]